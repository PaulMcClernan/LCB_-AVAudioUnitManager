library community.appleavaucomponentmanager.paulmcclernan

use com.livecode.engine
use com.livecode.foreign
use com.livecode.objc
use com.livecode.array
use com.livecode.list
use com.livecode.byte
use com.livecode.date
use com.livecode.binary
use com.livecode.bitwise
use com.livecode.math
use com.livecode.string

metadata version is "0.1"
metadata author is "Paul McClernan"
metadata title is "Apple AVAudioSampler library"
metadata svgicon is "M66.43,52.07c-0.71,0.32-1.48,0.56-2.31,0.78c-2.35,0.65-5.44,0.04-5.44,0.04l-8.52,9.56c0,0,11.03,11.58,13.36,13.92 s4.02,6.19,4.02,6.19l8.77-19.76C76.31,62.8,67.18,58.92,66.43,52.07z M56.35,86.86c-2.83-2.4-16.4-15.09-16.4-15.09L21.22,90.12c0,0,3.25,1.93,5.41,1.86c5.6-0.17,10.48-3.77,15.46-3.77 c4.58,0,8.99,3.52,15.56,3.77c1.55,0.06,2.88-0.35,4.41-1.24c0.7-0.41,2.02-1.54,2.02-1.54S59.18,89.26,56.35,86.86z M52.45,18.42c5.85-5.85,5.42-15.63,5.42-15.63s-8.65,0.97-13.34,6.82c-5.22,6.51-5.07,13.39-4.94,14.51 C44.49,24.13,48.71,22.16,52.45,18.42z M18.38,48.03c-3.59,0.27-3.23,4.28-3.21,4.45l0.03,0.32l-0.23,0.23l-5.54,5.89l-5.85-5.95l8.91,24.95l18.58-18.16l-8.8-9.83 C22.28,49.93,19.79,47.92,18.38,48.03z M9.98,39.65c0,0,1.4-2.6,5.19-5.27c2.15-1.51,4.69-2.88,7.45-3.52c1.75-0.41,3.72-0.62,5.86-0.62 c3.63,0,9.12,1.35,9.12,1.35l-10.85,4.24c-1.77,0.8-2.58,2.62-2.85,3.38l14.4,13.75c3.71-3.62,6.78-6.15,9.99-9.57 c-0.51-4.23,0.89-8.11,3.22-10.81c4.73-5.48,13.47-2.78,13.47-2.78l-3.55,3.05c0,0-4.13,3.16-3.01,6.79 c0.27,0.87,0.84,2.34,2.44,3.17c0.93,0.48,4.09,0.37,5.6-0.95C68.48,40.1,70.45,38,70.45,38s0.88-1.54,1.8-2.43 c1.11-1.08,3.56-2.91,3.56-2.91s-4.82-5.38-8.14-6.83c-2.91-1.27-6.15-1.89-9.71-1.91c-7.4-0.03-12.83,4.65-16.7,4.35 c-3.19-0.25-9.47-4.38-14.6-4.35c-7.22,0.05-13.04,2.44-17.47,7.33C5.44,35.37,4,45.11,4,45.11l1.89-1.93c0,0,2.98-0.11,3.34-0.41 c1.48-1.24,1.31-2.33,1.31-2.33L9.98,39.65z M18.15,46.11c1.68-0.19,4.88,2.09,4.88,2.09l9.22,10.03l4.11-3.86L21.75,39.42l0.13-0.52c0.03-0.14,0.88-3.49,3.9-4.84 l5.18-2.02c-1.95-0.07-5.6-0.11-7.97,0.42c-3.26,0.74-8.73,4.32-10.78,7.04c0.06,0.17,0.09,0.34,0.1,0.53 c0.08,1.49-1.41,3.45-2.02,3.98c-0.73,0.63-2.55,1.03-3.63,1.21l-3.94,3.94l6.59,6.6l3.85-3.86c-0.04-1.6,0.45-3.4,1.78-4.57 C15.67,46.71,16.48,46.3,18.15,46.11z M70.95,39.93c-0.62,0.44-4.18,6.07-9.58,4.98c-2.9-0.58-4.65-3.5-4.92-5.3c-0.6-4.07,1.8-6.16,3.56-7.69 c0.59-0.52,1.6-1.31,1.6-1.31s-6.16-0.73-9.16,3.5c-3.98,5.61-1.98,9.83-1.98,9.83S13.22,80.66,12.03,81.82 c-0.09,0.56-0.5,3.71,0.93,5.31c1.56,1.74,3.06,2.79,5.34,2.24c1.3-0.32,39.44-38.44,39.44-38.44s3.65,0.56,5.67,0.07 C68.3,49.8,70.71,46.32,70.95,39.93z M65.52,84.81c-0.14,0.85-0.52,1.48-1.2,1.99c-0.5,0.41-1.12,0.62-1.88,0.62c-2.8,0-6.23-3.51-6.24-3.52L41.82,70.25 l6.44-6.55c0,0,13.44,13.7,14.11,14.36C63.03,78.73,65.79,83.22,65.52,84.81z"
---------------------------------------------------------------------------------------------------------------------------
public foreign type AudioComponentDescriptionReturn binds to "MCAggregateTypeInfo:bbbbbbbbbbbbjj" -- 3x 4CharOSTypes & 2X UInt32s
public foreign type AudioComponentDescription binds to "MCAggregateTypeInfo:jjjjj" -- 5x OSType/UInt32s

private foreign handler objC_NSURLURLWithString(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.+URLWithString:"
private foreign handler objC_NSURLfileOrDirURLWithPath(in pPathString as ObjcId, in pIsDir as CBool) returns ObjcId binds to "objc:.NSURL.+fileURLWithPath:isDirectory:"
private foreign handler objC_NSURLfileURLWithPath(in pPathString as ObjcId) returns ObjcId binds to "objc:NSURL.+fileURLWithPath:"
private foreign handler objC_NSErrorAlloc() returns ObjcId binds to "objc:NSError.+alloc"
private foreign handler objC_NSObjectRetain(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.-retain"
private foreign handler objC_NSObjectAutoRealease(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.-autorelease"
private foreign handler objC_NSObjectRelease(in pNSObj as ObjcId) returns nothing binds to "objc:NSObject.-release"
private foreign handler objC_NSMutableArrayAlloc() returns ObjcRetainedId binds to "objc:NSMutableArray.+alloc"
private foreign handler objC_NSMutableArrayInitWithCapacity(in pNSMutableArray as ObjcId, in pCapacity as NaturalFloat) returns ObjcId binds to "objc:NSMutableArray.-initWithCapacity:"
private foreign handler objC_NSMutableArrayInitWithNSArray(in pNSMutableArray as ObjcId, in pNSArray as ObjcId) returns ObjcId binds to "objc:NSMutableArray.-initWithArray:"
public foreign handler ObjC_NSArrayAlloc() returns ObjcRetainedId binds to "objc:NSArray.+alloc"
public foreign handler ObjC_NSArrayComponentsJoinedByString(in pObj as ObjcId, in pSeperator as ObjcId) returns ObjcId binds to "objc:NSArray.-componentsJoinedByString:"
private foreign handler c_CFErrorCopyDescription(in pCFErrorRef as ObjcId) returns ObjcId binds to "c:CFErrorCopyDescription"
public foreign handler ObjC_NSPredicateWithFormat(in pFormatNSString as ObjcId) returns ObjcId binds to "objc:NSPredicate.+predicateWithFormat:"
public foreign handler ObjC_NSPredicateFromMetadataQueryString(in pFormatNSString as ObjcId) returns ObjcId binds to "objc:NSPredicate.+predicateFromMetadataQueryString:"

private foreign handler objC_AVAudioUnitAUComponentManager() returns ObjcId binds to "objc:AVAudioUnitComponentManager.+sharedAudioUnitComponentManager"
private foreign handler objC_AVAudioUnitAUComponentManagerTagNames(in pSharedAudioUnitComponentManager as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponentManager.tagNames"
-- private foreign handler objC_AVAudioUnitAUComponentManagerTagNames(in pSharedAudioUnitComponentManager as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponentManager.standardLocalizedTagNames"
private foreign handler objC_AVAudioUnitGetAudioUnitsFromACDesc(in pSharedAudioUnitComponentManager as ObjcId, in pAudioComponentDescription as AudioComponentDescription) returns ObjcId \
                        binds to "objc:AVAudioUnitComponentManager.-componentsMatchingDescription:"
private foreign handler objC_AVAudioUnitGetAudioUnitsFromNSPredicate(in pSharedAudioUnitComponentManager as ObjcId, in pNSPredicate as ObjcId) returns ObjcId \
                        binds to "objc:AVAudioUnitComponentManager.-componentsMatchingPredicate:"
private foreign handler objC_AVAudioUnitGetACDescription(in pAVAudioUnit as ObjcId) returns AudioComponentDescriptionReturn binds to "objc:AVAudioUnitComponent.audioComponentDescription"
private foreign handler objC_AVAudioUnitGetName(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.name"
private foreign handler objC_AVAudioUnitGetHasMIDIInput(in pAVAudioUnit as ObjcId) returns CBool binds to "objc:AVAudioUnitComponent.hasMIDIInput"
private foreign handler objC_AVAudioUnitGetArchitectures(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.availableArchitectures"
private foreign handler objC_AVAudioUnitGetVersionNSStr(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.versionString"
private foreign handler objC_AVAudioUnitGetManufacturer(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.manufacturerName"
private foreign handler objC_AVAudioUnitGetTypeName(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.typeName"
private foreign handler objC_AVAudioUnitGetVersion(in pAVAudioUnit as ObjcId) returns UInt64 binds to "objc:AVAudioUnitComponent.version"
private foreign handler objC_AVAudioUnitGetAudioUnit(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.audioUnit" -- macOS 10.11+ only

private foreign handler c_AudioUnitUninitialize(in pAVAUSampler as ObjcId) returns CSInt binds to "c:AudioUnit.framework>AudioUnitUninitialize"
private foreign handler c_AudioUnitInitialize(in pAVAUSampler as ObjcId) returns CSInt binds to "c:AudioUnit.framework>AudioUnitInitialize"
private foreign handler c_AudioUnitGetProperty(in pAudioUnit as ObjcId,in pPropertyID as UInt32,in pScope as UInt32, in pElement as UInt32, \
                                       out rData as Data, out rDataSize as UInt32) returns CSInt binds to "c:AudioUnit.framework>AudioUnitGetProperty"

private foreign handler objC_AVAudioUnitComponentGetComponent(in pAVAUSampler as ObjcId) returns any binds to "objc:AVAudioUnitComponent.audioComponent"
private foreign handler objC_AVAudioUnitComponentHasCustomView(in pAVAUSampler as ObjcId) returns CBool binds to "objc:AVAudioUnitComponent.hasCustomView"
--ArrayFromNSDictionary	handler	ArrayFromNSDictionary(pObjcArray)
private foreign handler c_AudioComponentCopyConfigurationInfo(in pAudioUnit as ObjcId, out rCFDictRef as optional ObjcId) returns CSInt binds to "c:AudioUnit.framework>AudioComponentCopyConfigurationInfo"
-- OSStatus AudioComponentCopyConfigurationInfo(AudioComponent inComponent, CFDictionaryRef  _Nullable *outConfigurationInfo);

public handler NSArrayToString(in pNSArray as ObjcObject) returns String
  variable tNSArray as ObjcObject
  variable tNSString as ObjcObject
  variable tStr as String
  put "\n" into tStr
  unsafe
    put ObjC_NSArrayComponentsJoinedByString(pNSArray, StringToNSString(tStr)) into tNSString
  end unsafe
  return StringFromNSString(tNSString)
end handler

public handler getIntegerFromFourCharCodeLittleEndian(in pStr as String) returns optional Uint32
   variable tUint32 as Uint32
   put (the code of char 4 of pStr) * 16777216 into tUint32 ---  256 * 256 * 256
   put tUint32 + ((the code of char 3 of pStr) * 65536 ) into tUint32 -- 256 * 256
   put tUint32 + ((the code of char 2 of pStr) * 256 ) into tUint32
   put tUint32 + (the code of char 1 of pStr) into tUint32
   return tUint32
end handler
public handler getIntegerFromFourCharCodeBigEndian(in pStr as String) returns optional Uint32
   variable tUint32 as Uint32
   put (the code of char 1 of pStr) * 16777216 into tUint32
   put tUint32 + ((the code of char 2 of pStr) * 65536 ) into tUint32
   put tUint32 + ((the code of char 3 of pStr) * 256 ) into tUint32
   put tUint32 + (the code of char 4 of pStr) into tUint32
   return tUint32
end handler

-- foreign handler MCDataGetBytePtr(in pData as Data) returns Pointer binds to "<builtin>"
public handler getFourCharCodeFromUint32( in pNum as optional any) returns optional String
   -- 1383023468 = appl
   variable tStr as String
   variable tTempStr as String
   variable tNum as Number
   variable tBinsStr as String
   put ( pNum converted from base 10 to base 16 ) into tBinsStr
   if (the number of chars in tBinsStr) < 8 then
      put 8 - (the number of chars in tBinsStr) into tNum
      repeat tNum times
         put "0" before tBinsStr
      end repeat
      -- log tBinsStr
   end if
    put ( (char 1 to 2 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
    put the char with code (tTempStr parsed as number) into tStr
    put ( (char 3 to 4 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
    put the char with code (tTempStr parsed as number) after tStr
    put ( (char 5 to 6 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
    put the char with code (tTempStr parsed as number) after tStr
    put ( (char 7 to 8 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
    put the char with code (tTempStr parsed as number) after tStr
   return tStr
end handler

public handler getBitFeild( in pNum as optional any) returns optional String
   if pNum is not nothing then
      variable tStr as String
      variable tNum as Number
      -- log pNum converted to base 2
      put pNum converted to base 2 into tStr
      if (the number of chars in tStr) < 32 then
         put 32 - (the number of chars in tStr) into tNum
         repeat tNum times
            put "0" before tStr
         end repeat
         --  log tBinsStr
      end if
      return tStr
  else
     return "0"
  end if

end handler

public handler getAudioComponentManagerTagNames() returns optional any
   variable tAVAudioUnitsManagerInstance as optional ObjcObject
   variable tNSArray as ObjcObject
   variable tList as optional List
   variable tString as String
   unsafe
     put objC_AVAudioUnitAUComponentManager() into tAVAudioUnitsManagerInstance
     put objC_AVAudioUnitAUComponentManagerTagNames(tAVAudioUnitsManagerInstance) into tNSArray
     put ListFromNSArray(tNSArray) into tList
   end unsafe
   combine tList with "\n" into tString
   return tString
end handler

public handler AVAudioUnitCMGetUnits(in pAUType as optional String, in pAUSubType as optional String, in pAUManufacturer as optional String) returns optional any
   variable tNumList as optional List
   variable tNSNumber as optional ObjcObject
   variable tNumber as optional Number
   variable tTempNSObj as optional ObjcObject
   variable rTempStr as optional String
   variable tTempStr as optional String
   variable tOSStatus as optional CSInt

   variable tAVAudioUnitsManagerInstance as optional ObjcObject
   variable tAudioComponentDescription as optional AudioComponentDescription
   variable tAudioComponentDescrParse as optional AudioComponentDescriptionReturn
   variable tMatchingtAudioComponentsNSArray as optional ObjcObject
   variable tAudioComponent as optional ObjcObject
   variable tAudioComponentsList as optional List
   variable tComponentType as UInt32
   variable tComponentSubType as UInt32
   variable tComponentManufacturer as UInt32
   variable tComponentFlags as UInt32
   variable tComponentFlagsMask as UInt32

   unsafe
   ------------------- Get Shared AUComponentManager -------------------------
    put objC_AVAudioUnitAUComponentManager() into tAVAudioUnitsManagerInstance
    ----------------------------- ComponentType ------------------------------
    if pAUType is not "" then
      if pAUType is "Music Devices" then
         put 1635085685 into tComponentType
      else if pAUType is "Audio FX" then
         put 1635083896 into tComponentType
      else
         put getIntegerFromFourCharCodeLittleEndian(pAUType) into tComponentType
      end if
   else
      put 0 into tComponentType
   end if
  ----------------------------- Manufacturers -------------------------
  if pAUManufacturer is not "" then
     -- log pAUManufacturer
     if pAUManufacturer is "Apple" then
        put 1634758764 into tComponentManufacturer
     else if pAUManufacturer is "Native Instruments" then
        put 760105261 into tComponentManufacturer
     else
        put getIntegerFromFourCharCodeBigEndian(pAUManufacturer) into tComponentManufacturer
     end if
   else
        put 0 into tComponentManufacturer
   end if

    put [tComponentType,0,tComponentManufacturer,0,0] into tAudioComponentDescription
    put objC_AVAudioUnitGetAudioUnitsFromACDesc(tAVAudioUnitsManagerInstance,tAudioComponentDescription) into tMatchingtAudioComponentsNSArray
   -- AudioComponentDescription feilds are componentType,componentSubType,componentManufacturer,componentFlags = 0,componentFlagsMask = 0
   -- For searching for AudioUnits, any feilds with 0 are wildcards
   -- put getAudioComponentDescriptionCharCodeNum("aumu") into tAudioComponentDescription[1] -- componentType
   -- put tComponentSubType into tAudioComponentDescription[2] -- componentSubType
   -- put getAudioComponentDescriptionCharCodeNum("appl") into tAudioComponentDescription[3] -- componentManufacturer
   -- put 0 into tAudioComponentDescription[4] -- ComponentFlags
   -- put 0 into tAudioComponentDescription[5] -- ComponentFlagsMask
   --
      --put ObjC_NSPredicateFromMetadataQueryString(StringToNSString(pSearchString)) into tTempNSObj
      --put objC_AVAudioUnitGetAudioUnitsFromNSPredicate(tAVAudioUnitsManagerInstance,tTempNSObj) into tMatchingtAudioComponentsNSArray

   if tMatchingtAudioComponentsNSArray is not nothing then
      put ListFromNSArray(tMatchingtAudioComponentsNSArray) into tAudioComponentsList
      -- log tMatchingtAudioUnitsList

      put "" into rTempStr
      repeat for each element tAudioComponent in tAudioComponentsList

         put objC_AVAudioUnitGetName(tAudioComponent) into tTempNSObj
         if tTempNSObj is not nothing then
            put StringFromNSString(tTempNSObj) & "," after rTempStr
         else
            put "Unnammed," after rTempStr
         end if

         put objC_AVAudioUnitGetManufacturer(tAudioComponent) into tTempNSObj
         if tTempNSObj is not nothing then
            put StringFromNSString(tTempNSObj) & "," after rTempStr
         else
            put "Unknown," after rTempStr
         end if

         put objC_AVAudioUnitGetVersionNSStr(tAudioComponent) into tTempNSObj
         if tTempNSObj is not nothing then
            put "v." & StringFromNSString(tTempNSObj) & "," after rTempStr
         else
            put "Unknown," after rTempStr
         end if
      -- put objC_AVAudioUnitGetVersion(tAudioComponent) into tNumber -- NaturalUInt
      -- put tNumber formatted as string & newline after rTempStr

         put objC_AVAudioUnitGetTypeName(tAudioComponent) into tTempNSObj
         if tTempNSObj is not nothing then
            put StringFromNSString(tTempNSObj) & "," after rTempStr
         else
            put "Unknown," after rTempStr
         end if

         if objC_AVAudioUnitGetHasMIDIInput(tAudioComponent) then
            put "MIDI Input," after rTempStr
         else
            put "No MIDI In," after rTempStr
         end if

         put objC_AVAudioUnitGetArchitectures(tAudioComponent) into tTempNSObj -- an NS Array of Constants that corespond to CPU Architectures
         put ListFromNSArray(tTempNSObj) into tNumList
         repeat for each element tNumber in tNumList
            -- ArchitecturePPC=0x00000012= 18 --- ArchitecturePPC64=0x01000012= 16777234   --- ArchitectureI386=0x00000007= 7 --- ArchitectureX86_64=0x01000007= 16777223
            if tNumber = 18 then
               put "PPC " after rTempStr
            else if tNumber = 16777234 then
               put "PPC64 " after rTempStr
            else if tNumber = 7 then
               put "x86 " after rTempStr
            else if tNumber = 16777223 then
               put "x86_64 " after rTempStr
            end if
         end repeat
         if the last char of rTempStr is " " then
            delete the last char of rTempStr
         end if
         put "," after rTempStr
         --put objC_AVAudioNodeGetNumberOfInputs(tAudioComponent) into tTempNSObj
         --put NumberFromNSNumber(tTempobjC_AVAudioNodeGetNumberOfInputsNSObj) & "," into tNumber
         --put tNumber formatted as string & "," after rTempStr

         --put objC_AVAudioNodeGetNumberOfOutputs(tAudioComponent) into tTempNSObj
         --put NumberFromNSNumber(tTempNSObj) & "," into tNumber
         --put tNumber formatted as string & "," after rTempStr

         put objC_AVAudioUnitGetACDescription(tAudioComponent) into tAudioComponentDescrParse

         put the char with code (element 4 of tAudioComponentDescrParse) after rTempStr
         put the char with code (element 3 of tAudioComponentDescrParse) after rTempStr
         put the char with code (element 2 of tAudioComponentDescrParse) after rTempStr
         put the char with code (element 1 of tAudioComponentDescrParse) & "," after rTempStr

         put the char with code (element 8 of tAudioComponentDescrParse) after rTempStr
         put the char with code (element 7 of tAudioComponentDescrParse) after rTempStr
         put the char with code (element 6 of tAudioComponentDescrParse) after rTempStr
         put the char with code (element 5 of tAudioComponentDescrParse) & "," after rTempStr

         put the char with code (element 12 of tAudioComponentDescrParse) after rTempStr
         put the char with code (element 11 of tAudioComponentDescrParse) after rTempStr
         put the char with code (element 10 of tAudioComponentDescrParse) after rTempStr
         put the char with code (element 9 of tAudioComponentDescrParse) & "," after rTempStr

         put getBitFeild( element 13 of tAudioComponentDescrParse ) & "," after rTempStr
         put getBitFeild( element 14 of tAudioComponentDescrParse ) & "," after rTempStr
         -- put (( element 13 of tAudioComponentDescrParse) converted from base 10 to base 2 ) & "," after rTempStr
         -- put element 13 of tAudioComponentDescrParse formatted as string & "," after rTempStr
         -- put element 14 of tAudioComponentDescrParse formatted as string after rTempStr
         -- put (( element 14 of tAudioComponentDescrParse) converted from base 10 to base 2 ) & "," after rTempStr

         put "\n" after rTempStr
      end repeat
    end if
   end unsafe
   return rTempStr
end handler

end library
